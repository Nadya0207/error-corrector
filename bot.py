import telebot
from telebot import types
import json
import random                               # –∏–º–ø–æ—Ä—Ç—ã

bot = telebot.TeleBot('1842261563:AAFUP-lfLPTRhEkSfPoNM9hFLB53ltxbwLQ')             # —Ç–æ–∫–µ–Ω

memory_from_user = dict()                 # —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
memory_from_bot = dict()                  # —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º


def send_upvote(message, text, i, number):                  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ø–≤–æ—É—Ç
    bot.send_message(message.from_user.id, text[i])
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    key_next = types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –∞–ø–≤–æ—É—Ç', callback_data=number)
    keyboard.add(key_next)
    key_home = types.InlineKeyboardButton(text='–î—Ä—É–≥–∞—è —Ç–µ–º–∞', callback_data='menu')
    keyboard.add(key_home)
    msg = '–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–∞–ª—å—à–µ?'
    a = bot.send_message(message.from_user.id, text=msg, reply_markup=keyboard)
    return a


def get_answer(message):
    if message.from_user.id not in memory_from_user:
        memory_from_user[message.from_user.id] = list()
    memory_from_user[message.from_user.id].append({'text': message.text, 'time': message.date})
    with open('data_from_user.json', 'w', encoding='utf-8') as r:
        json.dump(memory_from_user, r, ensure_ascii=False, indent=4)


@bot.message_handler(commands=['start'])                    # –∫–æ–º–∞–Ω–¥–∞ /start
def send_welcome(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç-–∞–ø–≤–æ—É—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã"
                                           " –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ª—é–¥–µ–π\n" + "‚ú®" + "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, "
                                           " –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help\n" + "‚ú®" + "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ "
                                           " —Ç–µ–∫—Å—Ç–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu\n" + "‚ú®" + "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –æ—Ç–∫—É–¥–∞"
                                           " –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /info")


@bot.message_handler(commands=['help'])                # –∫–æ–º–∞–Ω–¥–∞ /help
def send_help(message):
    bot.send_message(message.from_user.id, "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–æ –±–æ—Ç:\n" + "1Ô∏è‚É£" + "–í –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ (/menu) –í–∞–º –±—É–¥—É—Ç "
                                           "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö\n" + "2Ô∏è‚É£" + "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "
                                           "—Ç–µ–º—ã –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–ø–≤–æ—É—Ç, –µ–≥–æ –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –Ω–æ –∏"
                                           " –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–∞–±—Ä–∞—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω–∞–º —Å–æ–±—Ä–∞—Ç—å"
                                           "–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n" + "3Ô∏è‚É£" + "–¢9 –æ—Ç–∫–ª—é—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                                           " —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è, –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è—è\n" + "4Ô∏è‚É£" + "–ù–∞—à –±–æ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                                           "–Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏–Ω–æ–≥–¥–∞ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª " +
                                           "ü§°" + " –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –∞–ø–≤–æ—É—Ç'\n" + "5Ô∏è‚É£" + "–í –±–æ—Ç–∞—Ö"
                                           " –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∞–ø–≤–æ—É—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã—Ö, –ø—Ä–æ—Å—Ç–æ "
                                           "–ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–µ–º—É")


@bot.message_handler(commands=['info'])                # –∫–æ–º–∞–Ω–¥–∞ /info
def send_info(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="üëâ" + "–ö–ª–∏–∫" + "üëà",
                                            url="https://www.youtube.com/channel/UC-iU28QW_832Fx_3RJ_vYPQ")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, "–í—Å–µ —Ç–µ–∫—Å—Ç—ã –∞–ø–≤–æ—É—Ç–æ–≤ –≤–∑—è—Ç—ã –æ—Ç—Å—é–¥–∞", reply_markup=keyboard)


@bot.message_handler(commands=['menu'])                 # –∫–æ–º–∞–Ω–¥–∞ /menu
def send_menu(message):
    keyboard = types.InlineKeyboardMarkup()
    key_1 = types.InlineKeyboardButton(text='–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –∫–æ–Ω—á–∏–ª—Å—è –±—ã –∑–∞ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –±—ã –≥–µ—Ä–æ–π –Ω–µ —Ç—É–ø–∏–ª?',
                                       callback_data='number1')
    keyboard.add(key_1)
    key_2 = types.InlineKeyboardButton(text='–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞—Å –∂–¥—ë—Ç –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏?',
                                       callback_data='number2')
    keyboard.add(key_2)
    key_3 = types.InlineKeyboardButton(text='–ö—Ä—É—Ç—ã–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤',
                                       callback_data='number3')
    keyboard.add(key_3)
    bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏ —Ç–µ–º—É!', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)         # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ—á–µ–∫
def callback_worker(call):
    if call.data == "menu":
        send_menu(call)

    if call.data == "number1":
        with open('1.txt', encoding='utf-8') as f:
            text = f.read()
        splited_text = text.split('$')
        s = random.randint(0, len(splited_text) - 1)
        msg_send_first = splited_text[s]
        msg_send_second = send_upvote(call, splited_text, s, 'number1')
        bot.register_next_step_handler(msg_send_second, get_answer)
        if call.from_user.id not in memory_from_bot:
            memory_from_bot[call.from_user.id] = list()
        memory_from_bot[call.from_user.id].append({'text': msg_send_first, 'time': msg_send_second.date})
        with open('data_from_bot.json', 'w', encoding='utf-8') as p:
            json.dump(memory_from_bot, p, ensure_ascii=False, indent=4)

    if call.data == "number2":
        with open('2.txt', encoding='utf-8') as g:
            text = g.read()
        splited_text = text.split('$')
        s = random.randint(0, len(splited_text) - 1)
        msg_send_first = splited_text[s]
        memory_from_bot[call.from_user.id] = msg_send_first
        msg_send_second = send_upvote(call, splited_text, s, 'number2')
        bot.register_next_step_handler(msg_send_second, get_answer)
        if call.from_user.id not in memory_from_bot:
            memory_from_bot[call.from_user.id] = list()
        memory_from_bot[call.from_user.id].append({'text': msg_send_first, 'time': msg_send_second.date})
        with open('data_from_bot.json', 'w', encoding='utf-8') as p:
            json.dump(memory_from_bot, p, ensure_ascii=False, indent=4)

    if call.data == "number3":
        with open('3.txt', encoding='utf-8') as t:
            text = t.read()
        splited_text = text.split('$')
        s = random.randint(0, len(splited_text) - 1)
        msg_send_first = splited_text[s]
        memory_from_bot[call.from_user.id] = msg_send_first
        msg_send_second = send_upvote(call, splited_text, s, 'number3')
        bot.register_next_step_handler(msg_send_second, get_answer)
        if call.from_user.id not in memory_from_bot:
            memory_from_bot[call.from_user.id] = list()
        memory_from_bot[call.from_user.id].append({'text': msg_send_first, 'time': msg_send_second.date})
        with open('data_from_bot.json', 'w', encoding='utf-8') as p:
            json.dump(memory_from_bot, p, ensure_ascii=False, indent=4)


bot.polling(none_stop=True, interval=0)
